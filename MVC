Model - classes
Controller - "trabalha no meio de campo" - pega as requisições e diz quem é o responsável para executar
View - html
 

Diferença de web api pra mvc - web api serve pra tecnologia que entendemos como rest - transferir estado de objetos serializados
                               mvc devolve a view
                               
                               
public ActionResult Index(){
  return View();              ----- retorna o arquivo Index.cshtml (que deve estar dentro de uma pasta dentro da View)
}

@ gera no server

@{
  //aqui tem código em c#
}

@if(1 != 2){
  //este é um comando c#
}

sem '@', código em html.

comentários:
  html: <!-- comentário -->
  c#: //comentário

nome da View (pasta dentro da View) tem que ser igual da Controller
exemplo: View > Default ------ htmls dentro das pastas das Views
         Controllers > DefaultController.cs

ActionResult retorna uma View()


dentro da pasta Shared (que está dentro da pasta Views) cria uma página de layout MVC 5
exemplo: _Mestre.cshtml

ViewBag - pega conteúdo (variável, função) da Controller e leva pra View
Exemplo:
Na Controller:
    ViewBag.OMG = "Oh my god!";
    
Na View:
    string omg = ViewBag.OMG;
    
Se a ViewBag não for preenchida na Controller, a mesma é null
    
a = "";
b = null;
string d = (a ?? b) ---- pega a primeira variável não nula (operador coalesce)
d = a

CUIDADO AO TRABALHAR COM LISTAS. SEMPRE VERIFICAR SE A MESMA NÃO É NULA

Página parcial também começa com _Nome, igual páginas de layout
Na Controller:
public ActionResult Nome(){
    return PartialView("_Nome");
}

Onde for chamar a página parcial:
Exemplo (exibir modal quando clica no botão, o botão chama a função mostrarModal()):
<div id="vao"></div>
<button type="button" onclick="mostrarModal()">Modal</button>
function mostrarModal(){
  $.ajax({
    url: "/Pai/Nome",
    cache: false,
    method: "get",
    success: function(dados){
      $("#vao").html(dados);
    },
    error: function(){
      alert("Deu erro");
    }
  });
}

$("#vao").html(dados);    --- jQuery << melhor
         ou
var vao = document.getElementById("vao");
vao.innerHTML = dados;    --- não executa <script>
